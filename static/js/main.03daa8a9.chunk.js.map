{"version":3,"sources":["context.js","components/contact/Contact.js","components/contact/Contacts.js","components/layout/Header.js","components/layout/TextInputGroup.js","components/contact/AddContact.js","components/contact/EditContact.js","components/pages/About.js","components/pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","Object","objectSpread","contacts","filter","contact","id","payload","concat","toConsumableArray","map","Provider","_Component","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","dispatch","setState","inherits","createClass","key","value","_componentDidMount","asyncToGenerator","regenerator_default","a","mark","_callee","res","wrap","_context","prev","next","axios","get","sent","data","stop","react_default","createElement","props","children","Component","Consumer","Contact","showContactInfo","onDelete","delete","t0","_this2","_this$props$contact","name","email","phone","className","onClick","style","cursor","color","float","bind","Link","to","Contacts","Fragment","contact_Contact","Header","branding","defaultProps","TextInputGroup","_ref","label","placeholder","onChange","error","htmlFor","classnames","is-invalid","AddContact","errors","onSubmit","e","_this$state","newContact","preventDefault","abrupt","post","history","push","defineProperty","target","_this$state2","layout_TextInputGroup","EditContact","updContact","match","params","put","About","NotFound","App","context_Provider","BrowserRouter","basename","process","layout_Header","Switch","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.03daa8a9.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Context = React.createContext();\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'DELETE_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.filter(contact => contact.id !== action.payload)\r\n            }\r\n        case 'ADD_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: [\r\n                    action.payload,\r\n                    ...state.contacts\r\n                ]\r\n            }\r\n        case 'UPDATE_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.map(\r\n                    contact =>\r\n                        contact.id === action.payload.id\r\n                            ? (contact = action.payload)\r\n                            : contact)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport class Provider extends Component {\r\n    state = {\r\n        contacts: [],\r\n        dispatch: action => this.setState(state => reducer(state, action))\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const res = await axios.get('https://jsonplaceholder.typicode.com/users');\r\n\r\n        this.setState({ contacts: res.data });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Context.Provider value={this.state}>\r\n                {this.props.children}\r\n            </Context.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { Consumer } from '../../context';\r\n\r\n\r\nclass Contact extends Component {\r\n\r\n    state = {\r\n        showContactInfo: false\r\n    };\r\n\r\n    onDelete = async (id, dispatch) => {\r\n\r\n        // NOTE : Dont use try catch like this in real application\r\n        try {\r\n            await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n            dispatch({ type: 'DELETE_CONTACT', payload: id });\r\n        } catch (e) {\r\n            dispatch({ type: 'DELETE_CONTACT', payload: id });\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const { id, name, email, phone } = this.props.contact\r\n        return (\r\n\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n                    return (\r\n                        <div className=\"card card-body mb-3\">\r\n                            <h4 className=\"text-capitalize\">\r\n                                {name}\r\n                                <i\r\n                                    onClick={\r\n                                        () => this.setState({ showContactInfo: !this.state.showContactInfo })\r\n                                    }\r\n                                    className=\"fas fa-sort-down\"\r\n                                    style={{ cursor: 'pointer' }}\r\n                                />\r\n                                <i className=\"fas fa-times\"\r\n                                    style={{ color: 'red', float: 'right', cursor: 'pointer' }}\r\n                                    onClick={this.onDelete.bind(this, id, dispatch)}\r\n                                />\r\n                                <Link to={`/contact/edit/${id}`}>\r\n                                    <i className=\"fas fa-pencil-alt mr-1\"\r\n                                        style={{ color: 'black', float: 'right', cursor: 'pointer' }}\r\n                                    />\r\n                                </Link>\r\n                            </h4>\r\n                            {\r\n                                this.state.showContactInfo ?\r\n                                    <ul className=\"list-group\">\r\n                                        <li className=\"list-group-item\">Email: {email}</li>\r\n                                        <li className=\"list-group-item\">Phone: {phone}</li>\r\n                                    </ul> :\r\n                                    null\r\n                            }\r\n\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nContact.propTypes = {\r\n    contact: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default Contact;\r\n","import React, { Component } from 'react';\r\nimport Contact from './Contact';\r\nimport { Consumer } from '../../context';\r\n\r\nclass Contacts extends Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { contacts } = value;\r\n                    return (\r\n                        <React.Fragment>\r\n                            <h1 className=\"display-5 mb-3\"><span className=\"text-danger\">Contact</span> List</h1>\r\n                            {contacts.map(contact => <Contact key={contact.id} contact={contact} />)}\r\n                        </React.Fragment>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default Contacts;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst Header = (props) => {\r\n    const { branding } = props;\r\n    return (\r\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-2 py-0\">\r\n            <div className=\"container\">\r\n                <Link to=\"/\" className=\"navbar-brand\">{branding}</Link>\r\n                <div >\r\n                    <ul className=\"navbar-nav mr-auto\">\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/\" className=\"nav-link\"><i className=\"fas fa-home mr-1\"></i>Home</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/about\" className=\"nav-link\"><i className=\"fas fa-question mr-1\"></i>About</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/contact/add\" className=\"nav-link\"><i className=\"fas fa-plus mr-1\"></i>Add Contact</Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nHeader.defaultProps = {\r\n    branding: 'My App'\r\n}\r\n\r\nHeader.propTypes = {\r\n    branding: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames'\r\n\r\nconst TextInputGroup = ({\r\n    label,\r\n    name,\r\n    type,\r\n    value,\r\n    placeholder,\r\n    onChange,\r\n    error\r\n}) => {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <label htmlFor={name}>{label}</label>\r\n            <input\r\n                type={type}\r\n                name={name}\r\n                placeholder={placeholder}\r\n                className={classnames('form-control form-control-lg', { 'is-invalid': error })}\r\n                value={value}\r\n                onChange={onChange}\r\n            />\r\n            {error && <div className=\"invalid-feedback\">{error}</div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TextInputGroup;\r\n\r\nTextInputGroup.propTypes = {\r\n    label: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    error: PropTypes.string\r\n}\r\n\r\nTextInputGroup.defaultProps = {\r\n    type: 'text',\r\n    placeholder: ''\r\n}","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Consumer } from '../../context';\r\nimport TextInputGroup from '../layout/TextInputGroup';\r\n\r\nexport default class AddContact extends Component {\r\n\r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n    }\r\n\r\n\r\n    onSubmit = async (dispatch, e) => {\r\n        e.preventDefault();\r\n\r\n        const { name, email, phone } = this.state;\r\n\r\n        // Validating Input\r\n        if (name === '') {\r\n            this.setState({ errors: { name: 'Name is Required' } });\r\n            return;\r\n        }\r\n        if (email === '') {\r\n            this.setState({ errors: { email: 'Email is Required' } });\r\n            return;\r\n        }\r\n        if (phone === '') {\r\n            this.setState({ errors: { phone: 'Contact is Required' } });\r\n            return;\r\n        }\r\n\r\n        const newContact = {\r\n            name,\r\n            email,\r\n            phone\r\n        };\r\n\r\n        const res = await axios.post('https://jsonplaceholder.typicode.com/users', newContact);\r\n\r\n        dispatch({ type: 'ADD_CONTACT', payload: res.data });\r\n\r\n        // Clearing Inputs\r\n        this.setState({\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            errors: {}\r\n        });\r\n\r\n        // Redirecting to Home\r\n        this.props.history.push('/');\r\n\r\n    }\r\n\r\n    onChange = e => this.setState({ [e.target.name]: e.target.value })\r\n\r\n    render() {\r\n        const { name, email, phone, errors } = this.state;\r\n\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n                    return (\r\n                        <div className=\"card mb-3\">\r\n                            <div className=\"card-header\">Add Contact</div>\r\n                            <div className=\"card-body\">\r\n                                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                                    <TextInputGroup\r\n                                        label=\"Name\"\r\n                                        name=\"name\"\r\n                                        placeholder=\"Enter Name...\"\r\n                                        value={name}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.name}\r\n                                    />\r\n                                    <TextInputGroup\r\n                                        label=\"Email\"\r\n                                        name=\"email\"\r\n                                        type=\"email\"\r\n                                        placeholder=\"Enter Email...\"\r\n                                        value={email}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.email}\r\n                                    />\r\n                                    <TextInputGroup\r\n                                        label=\"Phone\"\r\n                                        name=\"phone\"\r\n                                        placeholder=\"e.g 332-883-1270\"\r\n                                        value={phone}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.contact}\r\n                                    />\r\n                                    <input type=\"submit\" value=\"Add Contact\" className=\"btn btn-light btn-block\" />\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n\r\n\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Consumer } from '../../context';\r\nimport TextInputGroup from '../layout/TextInputGroup';\r\n\r\nexport default class EditContact extends Component {\r\n\r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const { id } = this.props.match.params;\r\n        const res = await axios.get(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n\r\n        const contact = res.data;\r\n\r\n        this.setState({\r\n            name: contact.name,\r\n            email: contact.email,\r\n            phone: contact.phone\r\n        })\r\n\r\n    }\r\n\r\n    onSubmit = async (dispatch, e) => {\r\n        e.preventDefault();\r\n\r\n        const { name, email, phone } = this.state;\r\n\r\n        // Validating Input\r\n        if (name === '') {\r\n            this.setState({ errors: { name: 'Name is Required' } });\r\n            return;\r\n        }\r\n        if (email === '') {\r\n            this.setState({ errors: { email: 'Email is Required' } });\r\n            return;\r\n        }\r\n        if (phone === '') {\r\n            this.setState({ errors: { phone: 'Contact is Required' } });\r\n            return;\r\n        }\r\n\r\n        const updContact = {\r\n            name,\r\n            email,\r\n            phone\r\n        };\r\n\r\n        const { id } = this.props.match.params;\r\n\r\n        const res = await axios.put(`https://jsonplaceholder.typicode.com/users/${id}`, updContact);\r\n\r\n        dispatch({ type: 'UPDATE_CONTACT', payload: res.data });\r\n\r\n        // Clearing Inputs\r\n        this.setState({\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            errors: {}\r\n        });\r\n\r\n        // Redirecting to Home\r\n        this.props.history.push('/');\r\n\r\n    }\r\n\r\n    onChange = e => this.setState({ [e.target.name]: e.target.value })\r\n\r\n    render() {\r\n        const { name, email, phone, errors } = this.state;\r\n\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n                    return (\r\n                        <div className=\"card mb-3\">\r\n                            <div className=\"card-header\">Edit Contact</div>\r\n                            <div className=\"card-body\">\r\n                                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                                    <TextInputGroup\r\n                                        label=\"Name\"\r\n                                        name=\"name\"\r\n                                        placeholder=\"Enter Name...\"\r\n                                        value={name}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.name}\r\n                                    />\r\n                                    <TextInputGroup\r\n                                        label=\"Email\"\r\n                                        name=\"email\"\r\n                                        type=\"email\"\r\n                                        placeholder=\"Enter Email...\"\r\n                                        value={email}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.email}\r\n                                    />\r\n                                    <TextInputGroup\r\n                                        label=\"Phone\"\r\n                                        name=\"phone\"\r\n                                        placeholder=\"e.g 332-883-1270\"\r\n                                        value={phone}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.contact}\r\n                                    />\r\n                                    <input type=\"submit\" value=\"Edit Contact\" className=\"btn btn-light btn-block\" />\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n\r\n\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nconst About = () => {\r\n    return (\r\n        <div>\r\n            <h4 className=\"display-4\">About Contact Manager</h4>\r\n            <p className=\"lead\">A simple application to manage contacts</p>\r\n            <p className=\"text-secondary\">Version 1.0.0</p>\r\n            <p className=\"text-secondary\">Author: Izhan Yameen</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About;","import React from 'react'\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\"><span className=\"text-danger\">404</span> Page Not Found !</h1>\r\n            <p className=\"lead\">Sorry the requested page does not exist.</p>\r\n        </div>\r\n    )\r\n}\r\nexport default NotFound;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport Contacts from './components/contact/Contacts';\nimport Header from './components/layout/Header';\nimport AddContact from './components/contact/AddContact';\nimport EditContact from './components/contact/EditContact';\nimport About from './components/pages/About';\nimport NotFound from './components/pages/NotFound';\n\nimport { Provider } from './context';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider>\n        <Router basename={process.env.PUBLIC_URL}>\n          <div className=\"App\">\n            <Header branding=\"Contact Manager\" />\n            <div className=\"container\">\n              <Switch>\n                <Route exact path=\"/\" component={Contacts} />\n                <Route exact path=\"/about\" component={About} />\n                <Route exact path=\"/contact/add\" component={AddContact} />\n                <Route exact path=\"/contact/edit/:id\" component={EditContact} />\n                <Route component={NotFound} />\n              </Switch>\n            </div>\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}